// <auto-generated />
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(PersonileContext))]
    [Migration("20220708173451_DatesToStrings")]
    partial class DatesToStrings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("API.Entities.SprintEntity", b =>
                {
                    b.Property<string>("SprintEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("SprintEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("API.Entities.SubTaskEntity", b =>
                {
                    b.Property<string>("SubTaskEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskSprintId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubTaskEntityId");

                    b.HasIndex("TaskEntityId", "TaskSprintId");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("API.Entities.TaskEntity", b =>
                {
                    b.Property<string>("TaskEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SprintId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateFinished")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Effort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Links")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("TaskEntityId", "SprintId");

                    b.HasIndex("SprintId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("API.Entities.UserEntity", b =>
                {
                    b.Property<string>("UserEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("UserEntityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.SprintEntity", b =>
                {
                    b.HasOne("API.Entities.UserEntity", "User")
                        .WithMany("Sprints")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.SubTaskEntity", b =>
                {
                    b.HasOne("API.Entities.TaskEntity", "Task")
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskEntityId", "TaskSprintId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("API.Entities.TaskEntity", b =>
                {
                    b.HasOne("API.Entities.SprintEntity", "Sprint")
                        .WithMany("Tasks")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("API.Entities.SprintEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("API.Entities.TaskEntity", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("API.Entities.UserEntity", b =>
                {
                    b.Navigation("Sprints");
                });
#pragma warning restore 612, 618
        }
    }
}
