// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(PersonileContext))]
    [Migration("20220720171906_SprintLengthAndOverflowAdded")]
    partial class SprintLengthAndOverflowAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("API.Entities.BoardEntity", b =>
                {
                    b.Property<string>("BoardEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("HandleOverflow")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SprintDaysLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("TEXT");

                    b.HasKey("BoardEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("API.Entities.GoalEntity", b =>
                {
                    b.Property<string>("GoalEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BoardEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("GoalEntityId");

                    b.HasIndex("BoardEntityId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("API.Entities.MilestoneEntity", b =>
                {
                    b.Property<string>("MilestoneEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssociatedTaskIds")
                        .HasColumnType("TEXT");

                    b.Property<string>("BoardEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HardDeadline")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("MilestoneEntityId");

                    b.HasIndex("BoardEntityId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("API.Entities.SprintEntity", b =>
                {
                    b.Property<string>("SprintEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BoardEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("SprintEntityId");

                    b.HasIndex("BoardEntityId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("API.Entities.SubTaskEntity", b =>
                {
                    b.Property<string>("SubTaskEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskEntityId")
                        .HasColumnType("TEXT");

                    b.HasKey("SubTaskEntityId");

                    b.HasIndex("TaskEntityId");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("API.Entities.TaskEntity", b =>
                {
                    b.Property<string>("TaskEntityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateFinished")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Effort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Links")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SprintEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.HasKey("TaskEntityId");

                    b.HasIndex("SprintEntityId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("API.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80ba0a79-3854-4fee-a2a8-5f84655e42b2",
                            ConcurrencyStamp = "db1f347c-4384-4195-8928-88dbfb505a8b",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "6c1e6e45-3a0c-4599-9b6d-750894f94626",
                            ConcurrencyStamp = "37b94081-65c1-475f-a68f-ca3217676723",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Entities.BoardEntity", b =>
                {
                    b.HasOne("API.Entities.UserEntity", "UserEntity")
                        .WithMany("Boards")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("API.Entities.GoalEntity", b =>
                {
                    b.HasOne("API.Entities.BoardEntity", "BoardEntity")
                        .WithMany("Goals")
                        .HasForeignKey("BoardEntityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("BoardEntity");
                });

            modelBuilder.Entity("API.Entities.MilestoneEntity", b =>
                {
                    b.HasOne("API.Entities.BoardEntity", "BoardEntity")
                        .WithMany("Milestones")
                        .HasForeignKey("BoardEntityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("BoardEntity");
                });

            modelBuilder.Entity("API.Entities.SprintEntity", b =>
                {
                    b.HasOne("API.Entities.BoardEntity", "BoardEntity")
                        .WithMany("Sprints")
                        .HasForeignKey("BoardEntityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("BoardEntity");
                });

            modelBuilder.Entity("API.Entities.SubTaskEntity", b =>
                {
                    b.HasOne("API.Entities.TaskEntity", "TaskEntity")
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskEntityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("TaskEntity");
                });

            modelBuilder.Entity("API.Entities.TaskEntity", b =>
                {
                    b.HasOne("API.Entities.SprintEntity", "SprintEntity")
                        .WithMany("Tasks")
                        .HasForeignKey("SprintEntityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("SprintEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.BoardEntity", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("Milestones");

                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("API.Entities.SprintEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("API.Entities.TaskEntity", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("API.Entities.UserEntity", b =>
                {
                    b.Navigation("Boards");
                });
#pragma warning restore 612, 618
        }
    }
}
